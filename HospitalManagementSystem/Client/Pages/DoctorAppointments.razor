@page "/appointments/doctor"
@inject Radzen.DialogService dialogService
@inject HttpClient httpClient
@attribute [Authorize]

<MudDialog @bind-IsVisible="visible">
    <TitleContent>
        Add Appoinment
        <MudDivider />
    </TitleContent>
    <DialogContent>
        <EditForm Model="@input" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Select Patient</MudText>
                    <RadzenDropDown TValue="string" @bind-Value="input.PatientId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@input.Patients
                                    TextProperty="FullName" ValueProperty="Id" />
                    <MudTextField Label="Title" Placeholder="Title" HelperText="Min. 3 characters, Max. 30 characters"
                                  @bind-Value="input.Title" For="@(() => input.Title)" />
                    <RadzenDatePicker TValue="DateTime" @bind-Value="input.StartDate" Placeholder="Start Date" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                    <RadzenDatePicker TValue="DateTime" @bind-Value="input.EndDate" Placeholder="End Date" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                    <MudTextField Label="Description"
                                  @bind-Value="input.Description" For="@(() => input.Description)" />
                    <MudSelect T="string" @bind-Value="input.Status" Label="Status">
                        <MudSelectItem Value="@("Waiting")" />
                        <MudSelectItem Value="@("InProgress")" />
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid>
                        <MudItem xs="2">
                            <MudButton OnClick="this.Cancel" Variant="Variant.Filled" Color="Color.Default" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem xs="6"></MudItem>
                        <MudItem xs="2">
                            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Submit</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="visibleEdit">
    <TitleContent>
        Edit Appoinment
        <MudDivider />
    </TitleContent>
    <DialogContent>
        <EditForm Model="@editInput" OnValidSubmit="Edit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Select Doctor</MudText>
                    <RadzenDropDown TValue="string" @bind-Value="editInput.PatientId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@editInput.Patients
                                    TextProperty="FullName" ValueProperty="Id" />
                    <MudTextField Label="Title" Placeholder="Title" HelperText="Min. 3 characters, Max. 30 characters"
                                  @bind-Value="editInput.Title" For="@(() => editInput.Title)" />
                    <RadzenDatePicker TValue="DateTime" @bind-Value="editInput.StartDate" Placeholder="Start Date" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                    <RadzenDatePicker TValue="DateTime" @bind-Value="editInput.EndDate" Placeholder="End Date" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                    <MudTextField Label="Description"
                                  @bind-Value="editInput.Description" For="@(() => editInput.Description)" />
                    <MudSelect T="string" @bind-Value="editInput.Status" Label="Status">
                        <MudSelectItem Value="@("Waiting")" />
                        <MudSelectItem Value="@("InProgress")" />
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid>
                        <MudItem xs="2">
                            <MudButton OnClick="this.CancelEdit" Variant="Variant.Filled" Color="Color.Default" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem xs="6"></MudItem>
                        <MudItem xs="2">
                            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Update</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

<MudGrid>
    <MudItem xs="12">
        <h2>Appointments <strong class="text-black-50" style="font-size: 16px;">LEGEND</strong></h2>
    </MudItem>
    <MudItem Class="bg-primary" xs="2">Finished</MudItem>
    <MudItem Class="bg-success" xs="2">In Progress</MudItem>
    <MudItem Class="bg-danger" xs="2">Waiting</MudItem>
    <MudItem Class="bg-warning" xs="2">Cancelled</MudItem>
    <MudItem xs="4"></MudItem>
    <MudItem xs="12">
        <RadzenScheduler TItem="AllAppointmentsByDoctorIdViewModel" Data=@appointments StartProperty="StartDate" EndProperty="EndDate"
                         TextProperty="Title" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender style="height: 768px;">
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </MudItem>
</MudGrid>

@code {
    RadzenScheduler<AllAppointmentsByDoctorIdViewModel> scheduler;

    IEnumerable<AllAppointmentsByDoctorIdViewModel> appointments = new List<AllAppointmentsByDoctorIdViewModel>();

    private DoctorCreateAppointmentInputModel input = new DoctorCreateAppointmentInputModel();
    private DoctorEditAppointmentInputModel editInput = new DoctorEditAppointmentInputModel();

    private bool visible;
    private void OpenDialog() => this.visible = true;
    private void Cancel() => this.visible = false;

    private bool visibleEdit;
    private void OpenDialogEdit() => this.visibleEdit = true;
    private void CancelEdit() => this.visibleEdit = false;

    async Task Submit()
    {
        this.visible = false;
        await this.httpClient.PostAsJsonAsync<DoctorCreateAppointmentInputModel>("Appointments/DoctorCreate", input);
        this.appointments = await this.httpClient.GetFromJsonAsync<IEnumerable<AllAppointmentsByDoctorIdViewModel>>("Appointments/GetAllAppointmentsByDoctorId");
    }

    async Task Edit()
    {
        this.visibleEdit = false;
        await this.httpClient.PutAsJsonAsync<DoctorEditAppointmentInputModel>("Appointments/DoctorEdit", editInput);
        this.appointments = await this.httpClient.GetFromJsonAsync<IEnumerable<AllAppointmentsByDoctorIdViewModel>>("Appointments/GetAllAppointmentsByDoctorId");
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        input.StartDate = args.Start;
        input.EndDate = args.End;
        this.OpenDialog();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AllAppointmentsByDoctorIdViewModel> args)
    {
        this.editInput = await this.httpClient.GetFromJsonAsync<DoctorEditAppointmentInputModel>($"Appointments/DoctorEdit/{args.Data.Id}");
        this.OpenDialogEdit();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AllAppointmentsByDoctorIdViewModel> args)
    {
        if (args.Data.Status == "Waiting")
        {
            args.Attributes["style"] = "background: red";
        }
        else if (args.Data.Status == "Finished")
        {
            args.Attributes["style"] = "background: blue";
        }
        else if (args.Data.Status == "Cancelled")
        {
            args.Attributes["style"] = "background: yellow";
        }
        else
        {
            args.Attributes["style"] = "background: green";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.input = await this.httpClient.GetFromJsonAsync<DoctorCreateAppointmentInputModel>("Appointments/DoctorCreate");
        this.appointments = await this.httpClient.GetFromJsonAsync<IEnumerable<AllAppointmentsByDoctorIdViewModel>>("Appointments/GetAllAppointmentsByDoctorId");
    }
}