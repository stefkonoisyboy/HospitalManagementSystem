@page "/medicines"
@inject HttpClient httpClient

@if (this.viewModel.Count() == 0)
{
    <table class="table table-striped table-hover" style="width: 865px;">
        <tr>
            <td class="text-center">No data available in table</td>
        </tr>
    </table>
}
else
{
    <MudTable Items="@this.viewModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AllMedicinesViewModel,bool>(FilterFunc)" HeaderClass="table-head-bordered" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Medicine List</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.Id)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.MedicineName)">Medicine Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.GenericName)">Generic Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.Category)">Category</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.ExpiryDate)">Expiry Date</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.Price)">Price</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllMedicinesViewModel, object>(x=>x.Quantity)">Quantity</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Medicine Name">@context.MedicineName</MudTd>
            <MudTd DataLabel="Generic Name">@context.GenericName</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="Expiry Date">@context.ExpiryDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Price">@context.Price.ToString("f2")</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<AllMedicinesViewModel> viewModel = new List<AllMedicinesViewModel>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private AllMedicinesViewModel selectedItem = null;
    private HashSet<AllMedicinesViewModel> selectedItems = new HashSet<AllMedicinesViewModel>();

    protected override async Task OnInitializedAsync()
    {
        this.viewModel = await this.httpClient.GetFromJsonAsync<IEnumerable<AllMedicinesViewModel>>($"Medicines/GetAll");
    }

    private bool FilterFunc(AllMedicinesViewModel recipe)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (recipe.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.MedicineName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.GenericName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.ExpiryDate.ToString("yyyy-MM-dd").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Quantity.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}   