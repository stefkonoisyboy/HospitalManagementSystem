@page "/documentations"
@inject HttpClient httpClient

<MudTable Items="@this.viewModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AllDocumentationsByUserIdViewModel,bool>(FilterFunc)"  HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Documentations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllDocumentationsByUserIdViewModel, object>(x=>x.Id)">ID</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllDocumentationsByUserIdViewModel, object>(x=>x.Title)">Title</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllDocumentationsByUserIdViewModel, object>(x=>x.Patient)">Patient</MudTableSortLabel>
        </MudTh>
        <MudTh>Documents</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllDocumentationsByUserIdViewModel, object>(x=>x.Date)">Date</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Patient">@context.Patient</MudTd>
        <MudTd DataLabel="Documents">
            @for (int i = 0; i < context.Documents.Count(); i++)
            {
                <strong>@((i + 1) + ". ")</strong>
                <a href="#" class="text-primary">@context.Documents.ToList()[i]</a>
            }
        </MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("yyyy-MM-dd hh:mm:ss")</MudTd>
        <MudTd>
            @*<MudButton Variant="Variant.Filled" Color="Color.Warning">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                </svg>
                Edit
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                    <path d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                </svg>
                Delete
            </MudButton>*@
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private AllDocumentationsByUserIdViewModel selectedItem = null;
    private HashSet<AllDocumentationsByUserIdViewModel> selectedItems = new HashSet<AllDocumentationsByUserIdViewModel>();

    private IEnumerable<AllDocumentationsByUserIdViewModel> viewModel = new List<AllDocumentationsByUserIdViewModel>();
    private CurrentUserProfileViewModel currentUser = new CurrentUserProfileViewModel();

    protected override async Task OnInitializedAsync()
    {
        this.viewModel = await this.httpClient.GetFromJsonAsync<IEnumerable<AllDocumentationsByUserIdViewModel>>("Documentations/AllByUserId");
        this.currentUser = await this.httpClient.GetFromJsonAsync<CurrentUserProfileViewModel>("Users/GetProfileInfo");
    }

    private bool FilterFunc(AllDocumentationsByUserIdViewModel documentation)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (documentation.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (documentation.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (documentation.Patient.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (documentation.Documents.Any(d => d.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        if (documentation.Date.ToString("yyyy-MM-dd hh:mm:ss").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}