@page "/blood"
@inject HttpClient httpClient

@if (this.viewModel.Count() == 0)
{
    <table class="table table-striped table-hover" style="width: 865px;">
        <tr>
            <td class="text-center">No data available in table</td>
        </tr>
    </table>
}
else
{
    <MudTable Items="@this.viewModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AllBloodTypesViewModel,bool>(FilterFunc)" HeaderClass="table-head-bordered" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Blood Bank</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllBloodTypesViewModel, object>(x=>x.Id)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllBloodTypesViewModel, object>(x=>x.Name)">Blood Type</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AllBloodTypesViewModel, object>(x=>x.Quantity)">Status</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Blood Type">@context.Name</MudTd>
            <MudTd DataLabel="Status">@context.Quantity Bags</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<AllBloodTypesViewModel> viewModel = new List<AllBloodTypesViewModel>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private AllBloodTypesViewModel selectedItem = null;
    private HashSet<AllBloodTypesViewModel> selectedItems = new HashSet<AllBloodTypesViewModel>();

    protected override async Task OnInitializedAsync()
    {
        this.viewModel = await this.httpClient.GetFromJsonAsync<IEnumerable<AllBloodTypesViewModel>>($"BloodTypes/GetAll");
    }

    private bool FilterFunc(AllBloodTypesViewModel recipe)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (recipe.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Quantity.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}   