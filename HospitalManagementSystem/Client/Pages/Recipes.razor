@page "/recipes"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<MudTable Items="@this.viewModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AllRecipesByUserIdViewModel,bool>(FilterFunc)"  HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recipes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllRecipesByUserIdViewModel, object>(x=>x.Id)">R_ID</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllRecipesByUserIdViewModel, object>(x=>x.Doctor)">Doctor</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllRecipesByUserIdViewModel, object>(x=>x.Description)">Description</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllRecipesByUserIdViewModel, object>(x=>x.OtherInfo)">Other Informations</MudTableSortLabel>
        </MudTh>
        <MudTh>Medicine</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AllRecipesByUserIdViewModel, object>(x=>x.Date)">Date</MudTableSortLabel>
        </MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="R_ID">@context.Id</MudTd>
        <MudTd DataLabel="Doctor">@context.Doctor</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Other Informations">@context.OtherInfo</MudTd>
        <MudTd DataLabel="Medicine">
            @foreach (var medicine in context.Medicines)
            {
                <p>&#9642; @medicine</p>
            }
        </MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("yyyy-MM-dd")</MudTd>
        <MudTd>
            <MudButton @onclick="() => this.NavigateToDetails(context.Id)" Variant="Variant.Filled">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z" />
                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z" />
                </svg>
                View
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private AllRecipesByUserIdViewModel selectedItem = null;
    private HashSet<AllRecipesByUserIdViewModel> selectedItems = new HashSet<AllRecipesByUserIdViewModel>();

    private IEnumerable<AllRecipesByUserIdViewModel> viewModel = new List<AllRecipesByUserIdViewModel>();
    private CurrentUserProfileViewModel currentUser = new CurrentUserProfileViewModel();

    public RenderFragment htmlData;

    protected override async Task OnInitializedAsync()
    {
        this.viewModel = await this.httpClient.GetFromJsonAsync<IEnumerable<AllRecipesByUserIdViewModel>>("Recipes/AllByUserId");
        this.currentUser = await this.httpClient.GetFromJsonAsync<CurrentUserProfileViewModel>("Users/GetProfileInfo");
    }

    private bool FilterFunc(AllRecipesByUserIdViewModel recipe)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (recipe.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Doctor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.OtherInfo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Date.ToString("yyyy-MM-dd").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Medicines.Any(m => m.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        return false;
    }

    public void NavigateToDetails(int id)
    {
        this.navigationManager.NavigateTo($"/recipes/details/{id}");
    }
}